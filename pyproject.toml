[build-system]
requires = ["setuptools >= 75.1"]
build-backend = "setuptools.build_meta"
#requires = ["hatchling"]
#build-backend = "hatchling.build"

[project]
name = "bzfs"

description = """
bzfs is a backup command line tool that reliably replicates ZFS snapshots from a (local or remote) source ZFS dataset \
(ZFS filesystem or ZFS volume) and its descendant datasets to a (local or remote) destination ZFS dataset to make the \
destination dataset a recursively synchronized copy of the source dataset, using zfs send/receive/rollback/destroy and \
ssh tunnel as directed. bzfs can be used to incrementally replicate all ZFS snapshots since the most recent common \
snapshot from source to destination."""

authors = [
  {name = "Wolfgang Hoschek", email = "wolfgang.hoschek@mac.com"},
]
maintainers = [
  {name = "Wolfgang Hoschek", email = "wolfgang.hoschek@mac.com"},
]
dynamic = ["version"]
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
license = {text = "Apache License (2.0)"}
requires-python = ">= 3.8"
dependencies = [
]

[project.urls]
Homepage = "https://github.com/whoschek/bzfs"
Repository = "https://github.com/whoschek/bzfs"
Tests = "https://github.com/whoschek/bzfs/actions/workflows/python-app.yml?query=event%3Aschedule"
Coverage = "https://whoschek.github.io/bzfs/coverage"
Issues = "https://github.com/whoschek/bzfs/issues"
Changelog = "https://github.com/whoschek/bzfs/blob/main/CHANGELOG.md"
Distribution = "https://pypi.org/project/bzfs"

[project.optional-dependencies]
dev = [  # for development only
  "black==25.1",  # see https://github.com/psf/black
  "ruff==0.12.0",  # see https://github.com/astral-sh/ruff
  "coverage>=7.6",  # see https://github.com/nedbat/coveragepy
  "mypy==1.16.1",  # see https://github.com/python/mypy
  "argparse-manpage==4.6",  # see https://github.com/praiskup/argparse-manpage
  # "pandoc", # instead use this for v3.5: sudo apt-get -y install pandoc (Ubuntu) or brew install pandoc (OSX)
  "genbadge[coverage]==1.1.2",  # see https://smarie.github.io/python-genbadge/
  "pre-commit==4.2",  # see https://github.com/pre-commit/pre-commit
]
# Example that installs the optional python development dependencies (see above) into a venv:
# cd ~/devel/bzfs
# rm -rf venv
# python3 -m venv venv
# source venv/bin/activate
# pip install -e '.[dev]'
# pip list --not-required

[project.scripts]
bzfs = "bzfs_main.bzfs:main"
bzfs_jobrunner = "bzfs_main.bzfs_jobrunner:main"
bzfs-test = "bzfs_tests.test_all:main"

[tool.setuptools.packages.find]
where = ["."]
exclude = ["bzfs_docs", "bash_completion_d"]

[tool.setuptools.package-data]
bzfs_tests = ["*.json"]

[tool.setuptools.dynamic]
version = {attr = "bzfs_main.bzfs.__version__"}

[tool.hatch.build]
include = ["bzfs_main/**", "bzfs_tests/**"]

[tool.hatch.version]
path = "bzfs_main/bzfs.py"
pattern = "^__version__ = ['\"](?P<version>[^'\"]+)['\"]$"

[tool.coverage.run]  # see https://coverage.readthedocs.io/
branch = true
include = ["bzfs_main/*.py"]
omit = ["bzfs_tests/*.py", "*/__init__.py"]

[tool.black]
line_length = 125
target_version = ["py38", "py39", "py310", "py311", "py312", "py313"]

[tool.ruff]
target-version = "py38"
line-length = 125
fix = true  # allow safe auto-fixes?
unsafe-fixes = false  # allow FA100 and similar "unsafe" auto-fixes?
exclude = [   # toggles to exclude overly strict `ruff` checks of these Python source code directories in development mode:
#    "bzfs_main",
#    "bzfs_tests",
#    ".github-workflow-scripts",
]

[tool.ruff.lint]
select = [  # see https://docs.astral.sh/ruff/rules/
    "A",    # builtins
    "B",    # bugbear
    "CPY",  # copyright
    "E",    # pycodestyle error
    "EXE",  # shebang
    "F",    # pyflakes
    "FA",   # forward annotations
    "PGH",  # pygrep-hooks
    "RUF",  # ruff-specifc rules
    "S",    # bandit
    "T100", # Check for debugger imports and breakpoint() calls
#    "UP006",  # pyupgrade
#    "UP007",  # pyupgrade
#    "UP045",  # pyupgrade
    "YTT",  # flake8-2020
]

ignore = [  # toggles to exclude overly strict `ruff` checks in development mode:
#    "A003"   # Class attribute is shadowing a Python builtin
#    "B005",  # Using .strip() with multi-character strings
#    "B006",  # Do not use mutable data structures for argument defaults
#    "B007",  # Loop control variable not used within the loop body
#    "B008",  # Do not perform function calls in argument defaults
#    "B011",  # Do not use assert False
#    "B018",  # Found useless expression (typically typo/logic)
#    "B904",  # Raise exception with from err (except clause)
#    "E203",  # Whitespace before ':', conflicts with Black
#    "E402",  # Module level import not at top of file
#    "E501",  # Line too long
#    "E722",  # Do not use bare 'except'
#    "E731",  # Do not assign a lambda expression, use a def
#    "E741",  # Do not use ambiguous variable names like 'l', 'O', 'I'
#    "F401",  # Module imported but unused
#    "F403",  # 'from module import *' used
#    "F405",  # Name may be undefined from import *
#    "F841",  # Local variable assigned but never used
    "RUF005", # collection-literal-concatenation
    "S101",   # Use of assert detected (harmless)
    "S603",   # Use of subprocess without shell=True (this use is intended)
]

[tool.ruff.lint.per-file-ignores]
"bzfs_tests/**/*" = [
    "PGH003",  # pygrep-hooks blanket-type-ignore
    "S",       # bandit
]

[tool.mypy]
python_version = "3.8"
disallow_untyped_defs = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
#ignore_errors = true  #  big toggle to exclude all `mypy` checks in development mode
disable_error_code = [  # toggles to exclude overly strict `mypy` checks in development mode:
#    see https://mypy.readthedocs.io/en/stable/error_code_list.html#error-code-list
#    "assignment",
#    "attr-defined",
#    "name-defined",
#    "misc",
#    "arg-type",
#    "return-value",
#    "var-annotated",
#    "union-attr",
#    "operator",
#    "call-overload",
#    "no-redef",
#    "type-var",
#    "str-bytes-safe",
#    "func-returns-value",
#    "return",
#    "exit-return",
#    "index",
#    "call-arg",
]
