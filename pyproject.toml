[build-system]
requires = ["setuptools >= 75.1"]
build-backend = "setuptools.build_meta"
#requires = ["hatchling"]
#build-backend = "hatchling.build"

[project]
name = "bzfs"

description = """
bzfs is a backup command line tool that reliably replicates ZFS snapshots from a (local or remote) source ZFS dataset \
(ZFS filesystem or ZFS volume) and its descendant datasets to a (local or remote) destination ZFS dataset to make the \
destination dataset a recursively synchronized copy of the source dataset, using zfs send/receive/rollback/destroy and \
ssh tunnel as directed. bzfs can be used to incrementally replicate all ZFS snapshots since the most recent common \
snapshot from source to destination."""

authors = [
  {name = "Wolfgang Hoschek", email = "wolfgang.hoschek@mac.com"},
]
maintainers = [
  {name = "Wolfgang Hoschek", email = "wolfgang.hoschek@mac.com"},
]
dynamic = ["version"]
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
license = {text = "Apache License (2.0)"}
requires-python = ">= 3.8"
dependencies = [
]

[project.urls]
Homepage = "https://github.com/whoschek/bzfs"
Repository = "https://github.com/whoschek/bzfs"
Tests = "https://github.com/whoschek/bzfs/actions/workflows/python-app.yml?query=event%3Aschedule"
Coverage = "https://whoschek.github.io/bzfs/coverage"
Issues = "https://github.com/whoschek/bzfs/issues"
Changelog = "https://github.com/whoschek/bzfs/blob/main/CHANGELOG.md"
Distribution = "https://pypi.org/project/bzfs"

[project.optional-dependencies]
dev = [  # for development only
  "black==25.1",  # see https://github.com/psf/black
  "ruff==0.12.2",  # see https://github.com/astral-sh/ruff
  "pylint==3.3.7",  # see https://github.com/pycqa/pylint
  "coverage>=7.6",  # see https://github.com/nedbat/coveragepy
  "docformatter==1.7.7",  # see https://github.com/PyCQA/docformatter
  "mypy==1.16.1",  # see https://github.com/python/mypy
  "argparse-manpage==4.6",  # see https://github.com/praiskup/argparse-manpage
  # "pandoc", # instead use this for v3.5: sudo apt-get -y install pandoc (Ubuntu) or brew install pandoc (OSX)
  "genbadge[coverage]==1.1.2",  # see https://smarie.github.io/python-genbadge/
  "pre-commit==4.2",  # see https://github.com/pre-commit/pre-commit
]
# Example that installs the optional python development dependencies (see above) into a venv:
# cd ~/devel/bzfs
# rm -rf venv
# python3 -m venv venv
# source venv/bin/activate
# pip install -e '.[dev]'
# pip list --not-required

[project.scripts]
bzfs = "bzfs_main.bzfs:main"
bzfs_jobrunner = "bzfs_main.bzfs_jobrunner:main"
bzfs-test = "bzfs_tests.test_all:main"

[tool.setuptools.packages.find]
where = ["."]
exclude = ["bzfs_docs", "bash_completion_d"]

[tool.setuptools.package-data]
bzfs_tests = ["*.json"]

[tool.setuptools.dynamic]
version = {attr = "bzfs_main.bzfs.__version__"}

[tool.hatch.build]
include = ["bzfs_main/**", "bzfs_tests/**"]

[tool.hatch.version]
path = "bzfs_main/bzfs.py"
pattern = "^__version__ = ['\"](?P<version>[^'\"]+)['\"]$"

[tool.coverage.run]  # see https://coverage.readthedocs.io/
branch = true
include = ["bzfs_main/*.py"]
omit = ["bzfs_tests/*.py", "*/__init__.py"]

[tool.docformatter]         # auto-format Python docstrings to follow PEP 257 and Hard-wrap them to a specific line length
wrap-summaries = 125        # summary / one-liner length; see https://docformatter.readthedocs.io/en/latest/usage.html
wrap-descriptions = 125     # long-description line length
force-wrap = false          # force descriptions to be wrapped even if it may result in a mess?
in-place = true             # let pre-commit make changes to files instead of printing diffs

[tool.black]
line_length = 125
target_version = ["py38", "py39", "py310", "py311", "py312", "py313"]

[tool.ruff]
target-version = "py38"
line-length = 125
fix = true            # allow safe auto-fixes?
unsafe-fixes = false  # allow FA100 and similar "unsafe" auto-fixes?
show-fixes = true     # display which rule triggered an auto-fix
exclude = [   # toggles to exclude overly strict `ruff` checks of these Python source code directories in development mode:
#    "bzfs_main",
#    "bzfs_tests",
#    ".github-workflow-scripts",
]

[tool.ruff.lint]
select = [  # see https://docs.astral.sh/ruff/rules/
    "A",        # builtins
    "B",        # bugbear
    "C4",       # flake8-comprehensions
    "D100", "D101", "D102", "D103", "D106", "D200", "D206", "D403", "D404", "D414", "D418", "D419",  # pydocstyle
    "E",        # pycodestyle error
    "EXE",      # shebang
    "F",        # pyflakes
    "FA",       # forward annotations
    "G",        # flake8-logging-format
    "I",        # sort imports
    "ICN",      # flake8-import-conventions
    "INP",      # flake8-no-pep420
    "LOG",      # flake8-logging
    "N",        # pep8-naming, snake_case
    "PERF402",  # use list or list.copy to create a copy of a list
    "PGH",      # pygrep-hooks
    "PIE",      # flake8-pie
    "PLC",      # convention
    "PLE0704",  # bare raise statement is not inside an exception handler
    "PLE",      # error
    "PLR0402",  # use from {module} import {name} in lieu of alias
    "PLR1711",  # useless return statement at end of function
    "PLR1722",  # use sys.exit() instead of exit()
    "PLR1730",  # replace if statement with min() or max() if possible
    "PLR1733",  # unnecessary lookup of dictionary value by key
    "PLR1736",  # list index lookup in enumerate() loop
    "PLR2044",  # line with empty comment
    "PLW",      # warning
    "RUF",      # ruff-specifc rules
    "S",        # bandit
    "SIM115",   # flake8-simplify: Use a context manager for opening files
    "SIM300",   # yoda condition detected
    "SIM401",   # use dict.get(x, default) instead of if statement
    "SIM910",   # dict.get(x, None)
    "SIM911",   # use dict.items() instead of zip()
    "SLF",      # private member accessed
    "T100",     # check for debugger imports and breakpoint() calls
    "TID",      # flake8-tidy-imports
    "TRY",      # tryceratops raises
    "TRY201",   # use `raise` without specifying exception name
#    "UP006",   # pyupgrade
#    "UP007",   # pyupgrade
#    "UP045",   # pyupgrade
    "YTT",      # flake8-2020
]
preview = true                 # enable preview rules
explicit-preview-rules = true  # only opt into specific preview rules via extend-select whitelist (no blank opt-in)
extend-select = [
    "CPY001",   # copyright
    "PLR0202",  # no-classmethod-decorator
    "PLR0203",  # no-staticmethod-decorator
]
ignore = [  # toggles to exclude overly strict `ruff` checks:
    "G004",     # logging statement uses f-string
    "PLC0415",  # `import` should be at the top-level of a file
    "PLW0108",  # lambda may be unnecessary; consider inlining inner function
    "PLW1510",  # subprocess-run
    "PLW2901",  # redefined-loop-name
    "RUF005",   # collection-literal-concatenation
    "S101",     # use of assert detected (harmless)
    "S404",     # use of subprocess module (this use is intended)
    "S603",     # use of subprocess without shell=True (this use is intended)
    "TRY003",   # avoid specifying long messages outside the exception class
    "TRY300",   # consider moving this statement to an else block
    "TRY301",   # abstract raise to an inner function
    "TRY400",   # use logging.exception instead of logging.error
]

[tool.ruff.lint.per-file-ignores]
"bzfs_tests/**/*" = [
    "D101", "D102", "D103", "D104", "D105", "D106", "D107",  # pydocstyle: ignore all D rules except the ones we want
    "PERF402",  # use list or list.copy to create a copy of a list
    "PGH003",   # pygrep-hooks blanket-type-ignore
    "PLW0603",  # global-statement
    "S",        # bandit
    "SLF",      # private member accessed
]
"bash_completion_d/**/*" = [
    "SLF",      # private member accessed
]
".github-workflow-scripts/**/*" = [
    "N999",     # invalid-module-name
]
"**/__init__.py" = [
    "CPY",      # copyright
]
"**/check_range.py" = [
    "CPY",      # copyright
]

[tool.ruff.lint.flake8-copyright]
notice-rgx = """Copyright (\\(c\\) )?\\d{4}([-,]\\d{4})* Wolfgang Hoschek AT mac DOT com\
\\s+#\\s+# Licensed under the Apache License, Version 2\\.0"""

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-import-conventions]  # ICN
# forbid-aliased-import-of-modules, e.g. forbids 'import bzfs_main.bzfs as foo'
aliases = { "bzfs_main.bzfs" = "bzfs", "bzfs_main.bzfs_jobrunner" = "bzfs_jobrunner" }

# forbid-aliased-import-of-attributes, e.g. forbids 'from bzfs_main import bzfs as foo'
extend-aliases = { "bzfs_main.bzfs" = "bzfs", "bzfs_main.bzfs_jobrunner" = "bzfs_jobrunner" }

[tool.ruff.lint.isort]
known-first-party = ["bzfs_*"]
no-lines-before = ["standard-library"]  # no blank line before std-lib
lines-between-types = 0  # keep `import ...` and `from ...` tight
split-on-trailing-comma = true  # retain multi-line blocks when a trailing comma is present

[tool.pylint."MESSAGES CONTROL"]  # see https://pylint.readthedocs.io/en/latest/user_guide/messages/messages_overview.html
disable = ["all"]        # turn all checks off ...
enable  = ["R0401"]      # ...then re-enable just the detection of cyclic imports

[tool.mypy]
python_version = "3.8"
strict = false
disallow_untyped_defs = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
#ignore_errors = true  #  big toggle to exclude all `mypy` checks in development mode
disable_error_code = [  # toggles to exclude overly strict `mypy` checks in development mode:
#    see https://mypy.readthedocs.io/en/stable/error_code_list.html#error-code-list
#    "assignment",
#    "attr-defined",
#    "name-defined",
#    "misc",
#    "arg-type",
#    "return-value",
#    "var-annotated",
#    "union-attr",
#    "operator",
#    "call-overload",
#    "no-redef",
#    "type-var",
#    "str-bytes-safe",
#    "func-returns-value",
#    "return",
#    "exit-return",
#    "index",
#    "call-arg",
]
