# ---------------------------------------------------------------------------
# pre‑commit configuration for this repository; see https://github.com/pre-commit/pre-commit
# ---------------------------------------------------------------------------
# How to enable the Git hook on your machine (do this once per clone):
#   1. Install the helper tool:
#          pip install pre-commit
#   2. From the project root directory run:
#          pre-commit install --install-hooks
#      This writes an executable hook into .git/hooks/pre-commit that will run the checks
#      defined below every time you commit.
#   3. Whenever you update this YAML config file, run that same command again so the hook
#      picks up the new configuration.
#
# Optional maintenance commands:
#   * pre-commit run --all-files        # Run hooks on the whole repo
#   * pre-commit autoupdate             # Bump pinned revs to latest released tags
#   * pre-commit uninstall              # Remove the .git/hooks/pre-commit hook script
#
# These steps should also be mirrored in CI (e.g. `pre-commit run --all-files`)
# to guarantee that the same checks are enforced everywhere.
# ---------------------------------------------------------------------------
fail_fast: true                         # Abort on first failing hook
default_install_hook_types:
  - pre-commit
  - commit-msg
repos:
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.28.0
    hooks:                              # Prevent the accidental inclusion of passwords, API keys, and tokens in your commits
      - id: gitleaks                    # defaults to: gitleaks git --pre-commit --redact --staged --verbose
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      - id: detect-private-key          # Prevent the accidental inclusion of private keys in your commits
      - id: check-merge-conflict        # Check that merge conflicts are not being committed
      - id: check-toml                  # Attempt to load all TOML files to verify syntax
      - id: check-yaml                  # Attempt to load all YAML files to verify syntax
      - id: check-xml                   # Attempt to load all XML files to verify syntax via xmllint
      - id: check-json                  # Attempt to load all JSON files to verify syntax
        exclude: '.*/.*bzfs_log_config.*\.json$'
      - id: pretty-format-json          # Auto-format JSON files
        exclude: '.*/.*bzfs_log_config.*\.json$'
        args: [
          --autofix,
          --indent=4,
          --no-ensure-ascii,            # Keep non-ASCII chars verbatim
          --no-sort-keys,               # Preserve original key order
          --top-keys="",                # No keys forced to the top
        ]
      - id: check-symlinks              # Check for symlinks that do not point to anything
      - id: mixed-line-ending
        args: [--fix=lf]                # Replace line endings with linefeed
      - id: trailing-whitespace         # Remove whitespace from the end of lines
      - id: end-of-file-fixer           # Remove whitespace from the end of files and replace end of files with linefeed
  - repo: https://github.com/python-jsonschema/check-jsonschema
    rev: 0.34.0
    hooks:
      - id: check-github-workflows      # Validate syntax of GitHub Workflow YAML files
      - id: check-github-actions        # Validate syntax of GitHub Action YAML files
      #- id: check-compose-spec         # Validate syntax of Docker Compose files
      - id: check-dependabot            # Validate syntax of Dependabot config files
  # - repo: https://github.com/woodruffw/zizmor-pre-commit  # also see https://github.com/zizmorcore/zizmor
  #   rev: v1.13.0
  #   hooks:
  #     - id: zizmor                     # Validate syntax of GitHub Workflow YAML files
  #       args: [--fix=all]
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.11.0.1
    hooks:
      - id: shellcheck                  # Validate syntax of shell scripts
        exclude: '^\.github-workflow-scripts'
  - repo: https://github.com/PyCQA/docformatter
    rev: v1.7.7
    hooks:
      - id: docformatter  # Reformat Python docstrings to follow PEP 257 and wrap them to a specific line length
        additional_dependencies: [tomli]
        # config options like `wrap-summaries` live in pyproject.toml
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.13.1
    hooks:
      - id: ruff-check                  # Run `ruff` linter to check if there are problems in the Python source code
      # config options like `target-version` live in pyproject.toml
  # - repo: https://github.com/pycqa/isort
  #   rev: 6.0.1
  #   hooks:
  #     - id: isort                     # Reformat imports more precisely
  - repo: https://github.com/pycqa/pylint
    rev: v3.3.8
    hooks:
      - id: pylint                      # Run `pylint` linter to check if there are problems in the Python source code
        name: pylint (cyclic imports, etc)
        stages: [manual]  # Slow; only runs manually or in CI via 'pre-commit run pylint --all-files --hook-stage manual'
        files: '^(?!bzfs_tests/).*\.py$'  # Run on all Python files except bzfs_tests/
        # config options like `enable` live in pyproject.toml
  - repo: local
    hooks:
      - id: pyrefly-infer
        name: "pyrefly infer (auto-fix types)"
        exclude: '.*'  # Skip this hook. Comment out this line to enable this hook.
        entry: pyrefly infer --containers=true
        language: python
        additional_dependencies: ['pyrefly==0.33.1']
        pass_filenames: false
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.18.2
    hooks:
      - id: mypy                             # Run `mypy` Python type checker
        exclude: '^\.git.*$'
        # config options like `select` live in pyproject.toml
  - repo: local
    hooks:
      - id: forbid-noqa-E
        name: "forbid '# noqa: E' (pycodestyle errors)"
        language: pygrep
        entry: '#\s*noqa:\s*E(?!501\b)\d+\b' # noqa: E except E501
        types: [python]  # only scan *.py
      - id: forbid-noqa-F
        name: "forbid '# noqa: F' (pyflakes)"
        language: pygrep
        entry: '#\s*noqa:\s*F(?!821\b)\d+\b' # noqa: F except F821
        types: [python]
      - id: forbid-non-empty-init-py
        name: "forbid non-empty __init__.py"
        language: pygrep
        entry: '\S'                          # forbid any non-whitespace character
        files: '.*\/__init__\.py$'
      - id: forbid-dunder-all
        name: "forbid __all__ definitions"
        language: pygrep
        entry: '^__all__\s*='                # forbids any assignment to __all__
        types: [python]
      - id: forbid-aliased-import-of-modules
        name: "forbid aliased import of modules"    # e.g. forbids 'import bzfs_main.bzfs as foo'
        language: pygrep
        entry: '^\s*import\s+bzfs_\w+(\.\w+)*\s+as\s+\w+\s*'
        types: [python]
      - id: forbid-aliased-import-of-attributes
        name: "forbid aliased import of attributes" # e.g. forbids 'from bzfs_main import bzfs as foo'
        language: pygrep
        args: [--multiline]
        entry: '^\s*from\s+bzfs_\w+(\.\w+)*\s+import\s+(\(\n\s*)?(?!PROG_NAME)\w+(\.\w+)*\s+as\s+\w+\s*'
        types: [python]
      - id: forbid-ambiguous-characters
        name: "forbid ambiguous characters"
        language: pygrep
        entry: '…|–|“|”|‘|’|→'               # replace ambiguous with unambiguous characters (en dash, curly quotes, etc)
        types: [python]
  - repo: https://github.com/hukkin/mdformat
    rev: 0.7.22
    hooks:
      - id: mdformat              # Auto-format Markdown files - see https://github.com/hukkin/mdformat
        args: [--wrap=120, --number, --compact-tables]
        exclude: '^(README.*|prd)\.md$'
        additional_dependencies:  # see https://mdformat.readthedocs.io/en/stable/users/plugins.html
          - mdformat-gfm          # GitHub-Flavored Markdown support - see https://github.github.com/gfm
          - mdformat-frontmatter  # YAML frontmatter support
          - mdformat-toc          # auto-generate Table-of-Contents via this directive: <!-- mdformat-toc start -->
          - mdformat-shfmt        # format embedded bash, sh
          - mdformat-black        # format embedded python
          - mdformat-config       # format embedded json, toml, yaml
  - repo: https://github.com/codespell-project/codespell
    rev: v2.4.1
    hooks:
      - id: codespell  # Auto-fix typos; if you think this is in error, consider changing ignore-words-list in pyproject.toml
        additional_dependencies: [tomli]
        # config options like `ignore-words-list` live in pyproject.toml
  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
      - id: black                  # Run `black` Python code formatter
      # style options like `line_length` live in pyproject.toml
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v4.9.1
    hooks:
      - id: commitizen  # Check commit msg has the form `type(scope): description` per https://www.conventionalcommits.org
        stages: [commit-msg]
