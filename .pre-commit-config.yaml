# ---------------------------------------------------------------------------
# preâ€‘commit configuration for this repository; see https://github.com/pre-commit/pre-commit
# ---------------------------------------------------------------------------
# How to enable the Git hook on your machine (do this once per clone):
#   1. Install the helper tool:
#        pip install pre-commit
#   2. From the project root directory run:
#        pre-commit install --install-hooks
#      This writes an executable hook into .git/hooks/pre-commit that will
#      run the checks defined below every time you commit.
#   3. After updating this YAML file, run the same command again so the hook picks
#      up the new configuration.
#
# Optional maintenance commands:
#   * pre-commit run --all-files    # run hooks on the whole repo
#   * pre-commit autoupdate         # bump pinned revs to latest released tags
#
# These steps should also be mirrored in CI (e.g. `pre-commit run --all-files`)
# to guarantee that the same checks are enforced everywhere.
# ---------------------------------------------------------------------------
fail_fast: true  # abort on first failing hook
default_install_hook_types:
  - pre-commit
  - commit-msg
repos:
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.28.0
    hooks:  # Prevent the accidental inclusion of passwords, API keys, and tokens in your commits
      - id: gitleaks  # defaults to: gitleaks git --pre-commit --redact --staged --verbose
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: check-symlinks  # Check for symlinks that do not point to anything
      - id: check-yaml      # Attempt to load all yaml files to verify syntax
      - id: check-toml
      - id: check-json
        exclude: '.*/.*bzfs_log_config.*\.json$'
      - id: check-xml
      - id: mixed-line-ending
        args: [--fix=lf]  # Replace line endings with linefeed
      - id: trailing-whitespace  # Remove whitespace from the end of lines
      - id: detect-private-key  # Prevent the accidental inclusion of private keys in your commits
  - repo: https://github.com/python-jsonschema/check-jsonschema
    rev: 0.33.2
    hooks:
      - id: check-github-workflows      # Validate syntax of GitHub Workflow YAML files
      - id: check-github-actions        # Validate syntax of GitHub Action YAML files
      - id: check-compose-spec          # Validate syntax of Docker Compose files
      - id: check-dependabot            # Validate syntax of Dependabot config files
  - repo: https://github.com/PyCQA/docformatter
    rev: v1.7.7
    hooks:
      - id: docformatter  # Reformat Python docstrings to follow PEP 257 and wrap them to a specific line length
        additional_dependencies: [tomli]
        # config options like `wrap-summaries` live in pyproject.toml
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.12.7
    hooks:
      - id: ruff-check  # Run linter to check if there are problems in the Python source code
      # config options like `target-version` live in pyproject.toml
  - repo: https://github.com/pycqa/pylint
    rev: v3.3.7
    hooks:
      - id: pylint
        name: pylint R0401 (cyclic imports)
        exclude: '.*'  # Skip detection of circular imports. Comment out this line to enable detection of circular imports.
  - repo: local
    hooks:
      - id: pyrefly-autotype
        name: "pyrefly autotype (auto-fix types)"
        exclude: '.*'  # Skip this hook. Comment out this line to enable this hook.
        entry: pyrefly autotype
        language: python
        additional_dependencies: ['pyrefly==0.26.1']
        pass_filenames: false
  - repo: local
    hooks:
      - id: pytype-and-merge
        name: "pytype (auto-fix types)"
        entry: |
          bash -c '
            exit 0  # Skip this hook. Comment out this line to enable this hook.
            pytype --config pyproject.toml
            PYTYPE_EXIT_CODE=$?
            set -e
            NPROC=$(getconf _NPROCESSORS_ONLN 2>/dev/null || echo 8)
            find .pytype/pyi -type f -name "*.pyi" -print0 |
              xargs -0 -n1 -P"$NPROC" sh -c '\''
                pyi="$1"
                py=${pyi#.pytype/pyi/}
                py=${py%.pyi}.py
                merge-pyi --in-place "$py" "$pyi"
              '\'' _
            rm -rf .pytype
            exit $PYTYPE_EXIT_CODE
          '
        language: python
        additional_dependencies: ['pytype==2024.10.11']
        always_run: true
        pass_filenames: false
        types: [python]
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.16.1
    hooks:
      - id: mypy  # Run Python type checker
        exclude: '^\.git.*$'
        # config options like `select` live in pyproject.toml
  - repo: local
    hooks:
      - id: forbid-noqa-E
        name: "forbid '# noqa: E' (pycodestyle errors)"
        language: pygrep
        entry: '#\s*noqa:\s*E(?!501\b)\d+\b' # noqa: E except E501
        types: [python]  # only scan *.py
      - id: forbid-noqa-F
        name: "forbid '# noqa: F' (pyflakes)"
        language: pygrep
        entry: '#\s*noqa:\s*F(?!821\b)\d+\b' # noqa: F except F821
        types: [python]
      - id: forbid-non-empty-init-py
        name: "forbid non-empty __init__.py"
        language: pygrep
        entry: '\S'                          # forbid any non-whitespace character
        args: [--multiline]
        files: '.*\/__init__\.py$'
      - id: forbid-dunder-all
        name: "forbid __all__ definitions"
        language: pygrep
        entry: '^__all__\s*='                # forbids any assignment to __all__
        types: [python]
      - id: forbid-aliased-import-of-modules
        name: "forbid aliased import of modules"    # e.g. forbids 'import bzfs_main.bzfs as foo'
        language: pygrep
        entry: '^\s*import\s+bzfs_\w+(\.\w+)*\s+as\s+\w+\s*'
        types: [python]
      - id: forbid-aliased-import-of-attributes
        name: "forbid aliased import of attributes" # e.g. forbids 'from bzfs_main import bzfs as foo'
        language: pygrep
        args: [--multiline]
        entry: '^\s*from\s+bzfs_\w+(\.\w+)*\s+import\s+(\(\n\s*)?(?!PROG_NAME)\w+(\.\w+)*\s+as\s+\w+\s*'
        types: [python]
  - repo: https://github.com/hukkin/mdformat
    rev: 0.7.22
    hooks:
      - id: mdformat  # Auto-format Markdown files - see https://github.com/hukkin/mdformat
        args: [--wrap=120, --number, --compact-tables]
        exclude: '^(README.*|prd)\.md$'
        additional_dependencies:  # see https://mdformat.readthedocs.io/en/stable/users/plugins.html
          - mdformat-gfm          # GitHub-Flavored Markdown support - see https://github.github.com/gfm
          - mdformat-frontmatter  # YAML frontmatter support
          - mdformat-toc          # auto-generate Table-of-Contents via this directive: <!-- mdformat-toc start -->
          - mdformat-shfmt        # format embedded bash, sh
          - mdformat-black        # format embedded python
          - mdformat-config       # format embedded json, toml, yaml
  - repo: https://github.com/codespell-project/codespell
    rev: v2.4.1
    hooks:
      - id: codespell  # Auto-fix typos
        additional_dependencies: [tomli]
        # config options like `ignore-words-list` live in pyproject.toml
  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
      - id: black  # Run Python code formatter
      # style options like `line_length` live in pyproject.toml
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v4.8.3
    hooks:
      - id: commitizen  # Check commit msg has the form `type(scope): description` per https://www.conventionalcommits.org
        stages: [commit-msg]
